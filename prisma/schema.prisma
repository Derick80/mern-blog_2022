// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// schema.prisma
model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map(name: "email_verified")
  image         String?
  posts         Post[]
  profile       UserProfile?
  comments      Comment[]
  likes         Like[]
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")


  @@map(name: "users")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  views     Int       @default(0)
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  published Boolean   @default(false)
  likes     Like[]
}

// https://github.com/SelfDevTV/reddit-clone/blob/master/prisma/schema.prisma
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post?    @relation(fields: [postId], references: [id]) // A comment can have one post
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  postId    Int?
  likes     Like[]
}

model UserProfile {
  id           Int      @id @default(autoincrement())
  avatar_url   String
  nickname     String
  city         String
  country      String
  bio          String
  website      String
  profileViews Int      @default(0)
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  likes        Like[]
  updatedAt    DateTime @default(now())
}

model Like {
  id            Int          @id @default(autoincrement())
  likeType      LikeType
  user          User         @relation(fields: [userId], references: [id])
  post          Post?        @relation(fields: [postId], references: [id])
  comment       Comment?     @relation(fields: [commentId], references: [id])
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId Int?
  userId        Int
  postId        Int?
  commentId     Int?
}

enum LikeType {
  LIKED
  UNLIKE
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}
