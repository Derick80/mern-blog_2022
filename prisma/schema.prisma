// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// schema.prisma
model User {
  id            Int       @id @default(autoincrement())
  firstName     String?
  lastName      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  profileViews  Int       @default(0)
  likedPosts    Post[]    @relation("likedPosts")
  likedComments Comment[] @relation("likedComments")
  posts         Post[]
  profile       Profile?
  comments      Comment[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Post {
  id           Int        @id @default(autoincrement())
  title        String
  content      String?
  author       User?      @relation(fields: [authorId], references: [id])
  authorId     Int?
  categories   Category[] @relation(references: [id])
  likedByUsers User[]     @relation("likedPosts")
  views        Int        @default(0)
  likes        Int        @default(0)
  comments     Comment[]
  userLiked    Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  published    Boolean    @default(false)
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation(references: [id])
}

model Comment {
  id           Int      @id @default(autoincrement())
  content      String
  post         Post?    @relation(fields: [postId], references: [id]) // A comment can have one post
  likedByUsers User[]   @relation("likedComments")
  likes        Int      @default(0)
  author       User?    @relation(fields: [authorId], references: [id])
  authorId     Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  postId       Int?
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model Profile {
  id         Int      @id @default(autoincrement())
  avatar_url String
  nickname   String
  city       String
  country    String
  bio        String
  website    String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  updatedAt  DateTime @default(now())

}

model Word {
  id   Int    @id @default(autoincrement())
  word String
}

model RealLate {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
}
